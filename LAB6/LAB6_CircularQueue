#include <iostream>
#include <string>
using namespace std;

class Node {
public:
    string name;
    Node* next_ptr;

    Node(string name) {
        this->name = name;
        this->next_ptr = nullptr;
    }
};

class Queue {
public:
    Node* front;
    Node* rear;

    Queue() {
        front = nullptr;
        rear = nullptr;
    }

    // Add new node at the end
    void enqueue(string name) {
        Node* new_node = new Node(name);

        if (front == nullptr) {
            front = new_node;
            rear = new_node;
            rear->next_ptr = front;  // Make it circular
        } else {
            rear->next_ptr = new_node;
            rear = new_node;
            rear->next_ptr = front;  // Maintain circular link
        }
    }

    void dequeue() {
        if (front == nullptr) {
            cout << "Queue is empty. Cannot dequeue." << endl;
            return;
        }

        // If there's only one node
        if (front == rear) {
            cout << "Dequeued: " << front->name << endl;
            delete front;
            front = nullptr;
            rear = nullptr;
        } else {
            Node* temp = front;
            front = front->next_ptr;
            rear->next_ptr = front; // Maintain circular link
            cout << "Dequeued: " << temp->name << endl;
            delete temp;
        }
    }

    void display_queue() {
        if (front == nullptr) {
            cout << "Queue is empty." << endl;
            return;
        }

        Node* current = front;
        do {
            cout << current->name;
            current = current->next_ptr;
            if (current != front) {
                cout << " -> ";
            }
        } while (current != front);
        cout << endl;
    }
};

int main() {
    cout << "Queue Demo" << endl;
    Queue q;

    q.enqueue("Anya");
    q.enqueue("Marie");
    q.enqueue("Taylor");
    q.enqueue("Joy");

    cout << "Queue: ";
    q.display_queue();

    q.dequeue();

    cout << "After dequeueing: ";
    q.display_queue();

    // More tests
    q.dequeue();
    q.dequeue();
    q.dequeue();

    cout << "After all dequeues: ";
    q.display_queue();

    q.dequeue();  // Test dequeue on empty

    return 0;
}
